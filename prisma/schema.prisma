// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("Member") // Administrator, Staff, Member
  status    String   @default("active") // active, inactive, suspended
  lastLogin DateTime?
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Content models for website sections
model AboutContent {
  id          String   @id @default(cuid())
  vision      String
  mission     String
  goals       String
  story       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lecturer {
  id            String   @id @default(cuid())
  name          String
  photo         String
  position      String
  credentials   String
  bio           String
  specialization String
  category      String   // criminology, nursing, cpd
  subjects      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model NewsEvent {
  id        String   @id @default(cuid())
  title     String
  content   String
  summary   String
  image     String
  date      DateTime
  category  String   // news, event
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  text      String
  image     String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  category    String   // criminology, nursing, cpd
  features    String
  duration    Int      // in weeks
  price       Float
  schedule    String?
  enrollments Enrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SiteSettings {
  id            String   @id @default(cuid())
  siteName      String
  contactEmail  String
  contactPhone  String
  address       String
  socialLinks   String
  paymentGateways String? // JSON config for payment gateways
  taxRate       Float?   @default(0)
  lateFeeRate   Float?   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Student {
  id                  String   @id @default(cuid())
  studentId           String   @unique
  firstName           String
  lastName            String
  middleInitial       String?
  gender              String
  birthday            DateTime
  age                 Int?
  birthPlace          String
  contactNumber       String
  email               String
  address             String
  region              String?
  province            String?
  city                String?
  barangay            String?
  zipCode             String?
  guardianFirstName   String
  guardianLastName    String
  guardianMiddleInitial String?
  guardianContact     String
  guardianAddress     String
  relationship        String?
  schoolName          String?
  course              String?
  yearGraduated       String?
  howDidYouHear       String?
  referredBy          String?
  photo               String?  // Base64 encoded image data
  photoUrl            String?
  status              String   @default("active") // active, inactive, graduated
  enrollments         Enrollment[]
  attendances         Attendance[]
  examResults         ExamResult[]
  goodMorals          GoodMoral[]
  scheduleAttendances ScheduleAttendance[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Enrollment {
  id                  String   @id @default(cuid())
  enrollmentId        String   @unique
  student             Student  @relation(fields: [studentId], references: [id])
  studentId           String
  reviewType          String
  program             Program? @relation(fields: [programId], references: [id])
  programId           String?
  batch               String?
  startDate           DateTime
  endDate             DateTime?
  paymentMethod       String
  amount              Float
  totalPaid           Float    @default(0)
  remainingBalance    Float    @default(0)
  paymentStatus       String   @default("pending") // pending, partial, paid, overdue
  status              String   @default("pending") // pending, verified, completed
  installmentPlan     String?  // full, monthly, quarterly
  nextPaymentDue      DateTime?
  payments            Payment[]
  paymentReminders    PaymentReminder[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model PaymentReminder {
  id                  String   @id @default(cuid())
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId        String
  reminderType        String   // email, sms, both
  message             String
  scheduledDate       DateTime
  sentDate            DateTime?
  status              String   @default("pending") // pending, sent, failed
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Attendance {
  id                  String   @id @default(cuid())
  student             Student  @relation(fields: [studentId], references: [id])
  studentId           String
  date                DateTime
  status              String   // present, absent, late, excused
  remarks             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ExamResult {
  id                  String   @id @default(cuid())
  student             Student  @relation(fields: [studentId], references: [id])
  studentId           String
  examType            String   // mock exam, quiz, final exam
  subject             String
  score               Float
  totalPoints         Float
  percentage          Float
  remarks             String?
  examDate            DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Payment {
  id                  String   @id @default(cuid())
  transactionId       String   @unique
  enrollment          Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId        String
  amount              Float
  promoAvails         Float?   @default(0) // promotional amount student availed
  paymentStatus       String?  @default("downpayment") // downpayment, registration_fee, fully_paid
  paymentMethod       String   // cash, gcash, bank transfer, paypal
  paymentGateway      String?  // gcash, paymaya, bank
  gatewayTransactionId String?
  gatewayResponse     String?  // JSON response from gateway
  paymentDate         DateTime
  dueDate             DateTime?
  receiptNumber       String?
  status              String   // completed, pending, failed, refunded
  refundAmount        Float?   @default(0)
  refundReason        String?
  lateFee             Float?   @default(0)
  discount            Float?   @default(0)
  tax                 Float?   @default(0)
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  auditLogs           PaymentAuditLog[]
}

model PaymentAuditLog {
  id                  String   @id @default(cuid())
  payment             Payment  @relation(fields: [paymentId], references: [id])
  paymentId           String
  action              String   // created, updated, refunded, cancelled
  oldValues           String?  // JSON of old values
  newValues           String?  // JSON of new values
  performedBy         String
  ipAddress           String?
  userAgent           String?
  createdAt           DateTime @default(now())
}

model GoodMoral {
  id                  String   @id @default(cuid())
  certificateNumber   String   @unique
  student             Student  @relation(fields: [studentId], references: [id])
  studentId           String
  purpose             String
  issuedDate          DateTime
  validUntil          DateTime
  status              String   @default("active") // active, expired, revoked
  issuedBy            String
  remarks             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Schedule {
  id                  String   @id @default(cuid())
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  subject             String
  instructor          String
  room                String?
  type                String   // class, exam, event
  attendances         ScheduleAttendance[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ScheduleAttendance {
  id                  String   @id @default(cuid())
  schedule            Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId          String
  student             Student  @relation(fields: [studentId], references: [id])
  studentId           String
  status              String   // present, absent, late, excused
  timeIn              DateTime?
  timeOut             DateTime?
  remarks             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([scheduleId, studentId])
}